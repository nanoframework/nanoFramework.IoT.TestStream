name: Build TestStream.Runner

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Build the project
      run: dotnet build TestStream.Runner/TestStream.Runner.csproj
    
    - name: Trigger Azure DevOps Pipeline
      env:
        AZURE_DEVOPS_ORG: nanoframework
        AZURE_DEVOPS_PROJECT: nanoFramework.IoT.TestStream
        AZURE_DEVOPS_PIPELINE_ID: 111
        AZURE_POOL_NAME: TestStream
      run: |
        pwsh -Command "
        try {
            # Define the Azure DevOps organization, project, and pipeline
            $organization = '${{ env.AZURE_DEVOPS_ORG }}'
            $project = '${{ env.AZURE_DEVOPS_PROJECT }}'
            $pipelineId = '${{ env.AZURE_DEVOPS_PIPELINE_ID }}'
            $poolName = '${{ env.AZURE_POOL_NAME }}'

            # Encode the PAT
            $patEncoded = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('user:${{ secrets.AZURE_DEVOPS_PAT }}'))

            # Define the headers
            $headers = @{
                Authorization = 'Basic ' + $patEncoded
                'Content-Type' = 'application/json'
            }

            Write-Host 'Azure DevOps configuration initialized successfully'
        } catch {
            Write-Error 'Failed to initialize Azure DevOps configuration: $_'
            exit 1
        }
        
        $url = 'https://dev.azure.com/' + $organization + '/_apis/distributedtask/pools?poolName=' + $poolName + '&api-version=7.1'
        $AZP_POOL_AGENTS = Invoke-RestMethod -Uri $url -Headers $headers -Method Get
        $poolId = $AZP_POOL_AGENTS.value[0].id
        Write-Host 'Pool ID: $poolId'

        # Define the URL to get all agents in the pool
        $url = 'https://dev.azure.com/' + $organization + '/_apis/distributedtask/pools/' + $poolId + '/agents?includeCapabilities=true&api-version=7.1'

        try {
            # Get all agents
            $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers
            Write-Host 'Successfully retrieved agents from pool $poolId'
        } catch {
            Write-Error 'Failed to retrieve agents: $_'
            exit 1
        }

        $agentCapabilities = $response.value | 
          Where-Object { $_.status -eq 'online' -and $_.enabled -eq $true } |
          ForEach-Object { $_.userCapabilities.PSObject.Properties.Name } |
          Select-Object -Unique       

        $parameters = @{
            appComponents = $agentCapabilities
        }

        # Convert parameters to JSON
        $parametersJson = $parameters | ConvertTo-Json

        # Define the request body
        $body = @{
            resources = @{
                repositories = @(
                    @{
                        repository = 'templates'
                        type = 'github'
                        name = 'nanoframework/nf-tools'
                        endpoint = 'nanoframework'
                    }
                )
            }
            parameters = $parametersJson
        }

        # Convert the body to JSON
        $bodyJson = $body | ConvertTo-Json

        # Define the URL
        $url = 'https://dev.azure.com/' + $organization + '/' + $project + '/_apis/pipelines/' + $pipelineId + '/runs?api-version=7.1'

        # Trigger the pipeline
        Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $bodyJson
        "