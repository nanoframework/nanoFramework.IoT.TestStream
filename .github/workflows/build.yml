name: Build TestStream.Runner

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Build the project
      run: dotnet build TestStream.Runner/TestStream.Runner.csproj
    
    - name: Trigger Azure DevOps Pipeline
      env:
        AZURE_DEVOPS_ORG: nanoframework
        AZURE_DEVOPS_PROJECT: nanoFramework.IoT.TestStream
        AZURE_DEVOPS_PIPELINE_ID: 111
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_POOL_NAME: TestStream
      run: |
        pwsh -Command "
        
        # Define the Azure DevOps organization, project, and pipeline
        $organization = '${{ env.AZURE_DEVOPS_ORG }}'
        $project = '${{ env.AZURE_DEVOPS_PROJECT }}'
        $pipelineId = '${{ env.AZURE_DEVOPS_PIPELINE_ID }}'
        $poolName = '${{ env.AZURE_POOL_NAME }}'

        # Define the personal access token (PAT)
        $pat = '${{ secrets.AZURE_DEVOPS_PAT }}'

        # Encode the PAT
        $patEncoded = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("user:" + $($pat)))

        # Define the headers
        $headers = @{
            Authorization = 'Basic ' + $patEncoded
            'Content-Type' = 'application/json'
        }
        
        $url = 'https://dev.azure.com/' + $organization + '/_apis/distributedtask/pools?poolName=' + $poolName + '&api-version=7.2-preview.1'
        $AZP_POOL_AGENTS = Invoke-RestMethod -Uri $url -Headers @{Authorization=("Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("user:" + $($pat))))} -Method Get
        $poolId = $AZP_POOL_AGENTS.value[0].id

        # Define the URL to get all agents in the pool
        $url = 'https://dev.azure.com/' + $organization + '/_apis/distributedtask/pools/' + $poolId + '/agents?api-version=6.0-preview.1'

        # Get all agents
        $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers

        # Collect IDs of active and online agents
        $agentIds = $response.value | Where-Object { $_.status -eq 'online' -and $_.enabled -eq $true } | ForEach-Object { $_.id }

        # Get the capabilities of each agent
        $agentCapabilities = @()
        foreach ($agentId in $agentIds) {
            $capabilitiesUrl = 'https://dev.azure.com/' + $organization + '/_apis/distributedtask/pools/' + $poolId + '/agents/' + $agentId + '?includeCapabilities=true&api-version=6.0-preview.1'
            $agentResponse = Invoke-RestMethod -Uri $capabilitiesUrl -Method Get -Headers $headers

            # Extract the keys (names) of userCapabilities
            $capabilityNames = $agentResponse.userCapabilities.PSObject.Properties.Name
    
            # Iterate over each item in capacityNames
            foreach ($item in $capabilityNames) {
                # Check if the item is already in agentCapabilities
                if (-not ($agentCapabilities -contains $item)) {
                    # Add the item to agentCapabilities
                    $agentCapabilities += $item
                }
            }
        }
        
        $parameters = @{
            appComponents = $agentCapabilities
        }

        # Convert parameters to JSON
        $parametersJson = $parameters | ConvertTo-Json

        # Define the request body
        $body = @{
            resources = @{
                repositories = @(
                    @{
                        repository = 'templates'
                        type = 'github'
                        name = 'nanoframework/nf-tools'
                        endpoint = 'nanoframework'
                    }
                )
            }
            parameters = $parametersJson
        }

        # Convert the body to JSON
        $bodyJson = $body | ConvertTo-Json

        # Define the URL
        $url = 'https://dev.azure.com/' + $organization + '/' + $project + '/_apis/pipelines/' + $pipelineId + '/runs?api-version=6.0-preview.1'

        # Trigger the pipeline
        Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $bodyJson
        "